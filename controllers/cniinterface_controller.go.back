/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"fmt"

	"github.com/go-logr/logr"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	batchv1alpha1 "sdewan.akraino.org/sdewan/api/v1alpha1"
	"sdewan.akraino.org/sdewan/openwrt"
	// "sdewan.akraino.org/sdewan/cnfprovider"
)

// CniInterfaceReconciler reconciles a CniInterface object
type CniInterfaceReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=batch.sdewan.akraino.org,resources=cniinterfaces,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=batch.sdewan.akraino.org,resources=cniinterfaces/status,verbs=get;update;patch

func (r *CniInterfaceReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	log := r.Log.WithValues("cniinterface", req.NamespacedName)

	// your logic here
	var cniInterface batchv1alpha1.CniInterface
	if err := r.Get(ctx, req.NamespacedName, &cniInterface); err != nil {
		log.Info(fmt.Sprintf("ctx %v", ctx))
		log.Info(fmt.Sprintf("cniinterface %v", cniInterface))
		log.Error(err, "unable to fetch CniInterface")
		// we'll ignore not-found errors, since they can't be fixed by an immediate
		// requeue (we'll need to wait for a new notification), and we can get them
		// on deleted requests.
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}
	// log.Info(fmt.Sprintf("ctx %v", ctx))
	log.Info(fmt.Sprintf("cniinterface %v", cniInterface))
	log.Info(cniInterface.Labels["sdewanPurpose"])
	// Spec:
	//   ip_address:
	//     10.244.0.10
	//   Selector:
	//     Match Labels:
	//       Sdewan Purpose:  cnf

	log.Info("=================================================================")
	log.Info(cniInterface.Spec.CnfSelector.MatchLabels["sdewanPurpose"])
	log.Info("-----------------------------------------------------------------")

	podList := &corev1.PodList{}
	label := cniInterface.Spec.CnfSelector.MatchLabels["sdewanPurpose"]
	err := r.Client.List(ctx, podList, client.MatchingLabels{"sdewanPurpose": label})
	if err != nil {
		log.Error(err, "Failed to get pod list")
		return ctrl.Result{}, err
	}

	fcs := &openwrt.AvailableInterfaces{}
	for _, pod := range podList.Items {
		openwrtClient := openwrt.NewOpenwrtClient(pod.Status.PodIP, "root", "")
		ifc := openwrt.InterfaceClient{OpenwrtClient: openwrtClient}
		fcs, _ = ifc.GetAvailableInterfaces() // TODO, support get one interface?
		fmt.Println("AvailableInterfaces:", fcs)
		fmt.Println("Interface 0, name:", fcs.Interfaces[0].Name)
	}

	log.Info("-----------------------------------------------------------------")
	for _, fc := range fcs.Interfaces {
		if cniInterface.Spec.Name == fc.Name {
			cniInterface.Status.Status = fc.Status
			cniInterface.Status.ReceivedPackets = fc.ReceivedPackets
			cniInterface.Status.SendPackets = fc.SendPackets
			cniInterface.Status.MacAddress = fc.MacAddress
			cniInterface.Status.IpAddress = fc.IpAddress
			break
		}
	}
	if err := r.Update(ctx, &cniInterface); err != nil {
		log.Error(err, "unable to update CniInterface status")
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *CniInterfaceReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&batchv1alpha1.CniInterface{}).
		Complete(r)
}
