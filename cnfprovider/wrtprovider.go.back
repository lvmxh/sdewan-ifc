package cnfprovider

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	corev1 "k8s.io/api/core/v1"
	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"reflect"
	sdewanv1alpha1 "sdewan.akraino.org/sdewan/api/v1alpha1"
	"sdewan.akraino.org/sdewan/openwrt"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"strconv"
)

var log = logf.Log.WithName("wrt_provider")

type WrtProvider struct {
	Namespace     string
	SdewanPurpose string
	Deployment    extensionsv1beta1.Deployment
	K8sClient     client.Client
}

func NewWrt(namespace string, sdewanPurpose string, k8sClient client.Client) (*WrtProvider, error) {
	reqLogger := log.WithValues("namespace", namespace, "sdewanPurpose", sdewanPurpose)
	ctx := context.Background()
	deployments := &extensionsv1beta1.DeploymentList{}
	err := k8sClient.List(ctx, deployments, client.MatchingLabels{"sdewanPurpose": sdewanPurpose})
	if err != nil {
		reqLogger.Error(err, "Failed to get cnf deployment")
		return nil, client.IgnoreNotFound(err)
	}
	if len(deployments.Items) != 1 {
		reqLogger.Error(nil, "More than one deployment exists")
		return nil, errors.New("More than one deployment exists")
	}

	return &WrtProvider{namespace, sdewanPurpose, deployments.Items[0], k8sClient}, nil
}

func (p *WrtProvider) net2iface(net string) (string, error) {
	type Iface struct {
		DefaultGateway bool `json:"defaultGateway,string"`
		Interface      string
		Name           string
	}
	type NfnNet struct {
		Type      string
		Interface []Iface
	}
	ann := p.Deployment.Spec.Template.Annotations
	nfnNet := NfnNet{}
	err := json.Unmarshal([]byte(ann["k8s.plugin.opnfv.org/nfn-network"]), &nfnNet)
	if err != nil {
		return "", err
	}
	for _, iface := range nfnNet.Interface {
		if iface.Name == net {
			return iface.Interface, nil
		}
	}
	return "", errors.New(fmt.Sprintf("No matched network in annotation: %s", net))

}
